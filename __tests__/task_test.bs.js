// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Task$Task = require("../src/Task.bs.js");

function timeout(value) {
  return /* Task */[(function (param, res) {
              var timer = setTimeout((function (param) {
                      return Curry._1(res, value);
                    }), value);
              return /* Cancel */Block.__(0, [(function (param) {
                            clearTimeout(timer);
                            return /* () */0;
                          })]);
            })];
}

function notTimeout(value) {
  return /* Task */[(function (param, res) {
              Curry._1(res, value);
              return /* NoCancel */0;
            })];
}

function makeTask(i) {
  if (i >= 100000) {
    return Task$Task.pure(/* Done */Block.__(1, [i + 1 | 0]));
  } else if (i < 0) {
    return Task$Task.reject("i must be positive");
  } else {
    return Task$Task.pure(/* Next */Block.__(0, [i + 1 | 0]));
  }
}

Jest.describe("Testing Task", (function (param) {
        Jest.testAsync("basic run", undefined, (function (cb) {
                var simpleTask = /* Task */[(function (param, res) {
                      Curry._1(res, 10);
                      return /* NoCancel */0;
                    })];
                Task$Task.run(simpleTask, (function (status) {
                        return Curry._1(cb, Jest.Expect[/* toEqual */12](/* Success */Block.__(1, [10]), Jest.Expect[/* expect */0](status)));
                      }));
                return /* () */0;
              }));
        return Jest.testAsync("Cancelation Test", undefined, (function (cb) {
                      var cancel = Task$Task.run(timeout(100), (function (param) {
                              if (param.tag) {
                                return Curry._1(cb, Jest.fail("should not run"));
                              } else {
                                return Curry._1(cb, Jest.fail("should not reject"));
                              }
                            }));
                      Curry._1(cancel, /* () */0);
                      setTimeout((function (param) {
                              return Curry._1(cb, Jest.pass);
                            }), 110);
                      return /* () */0;
                    }));
      }));

exports.timeout = timeout;
exports.notTimeout = notTimeout;
exports.makeTask = makeTask;
/*  Not a pure module */
