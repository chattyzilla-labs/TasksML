// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

function run(onResponse, param) {
  var openend = /* record */[/* contents */true];
  var rejection = function (err) {
    if (openend[0]) {
      openend[0] = false;
      return Curry._1(onResponse, /* Rejection */Block.__(0, [err]));
    } else {
      return 0;
    }
  };
  var success = function (res) {
    if (openend[0]) {
      openend[0] = false;
      return Curry._1(onResponse, /* Success */Block.__(1, [res]));
    } else {
      return 0;
    }
  };
  var cancelFn = Curry._2(param[0], rejection, success);
  return (function (param) {
      if (openend[0]) {
        openend[0] = false;
        if (cancelFn) {
          return Curry._1(cancelFn[0], /* () */0);
        } else {
          return /* () */0;
        }
      } else {
        return 0;
      }
    });
}

function chain(task, fn) {
  return /* Task */[(function (rej, res) {
              var cancelFn = /* record */[/* contents */(function (param) {
                    return /* () */0;
                  })];
              var onResponse = function (status) {
                if (status.tag) {
                  cancelFn[0] = run((function (status) {
                          if (status.tag) {
                            return Curry._1(res, status[0]);
                          } else {
                            return Curry._1(rej, status[0]);
                          }
                        }), Curry._1(fn, status[0]));
                  return /* () */0;
                } else {
                  return Curry._1(rej, status[0]);
                }
              };
              cancelFn[0] = run(onResponse, task);
              return /* Cancel */[(function (param) {
                          return Curry._1(cancelFn[0], /* () */0);
                        })];
            })];
}

function chainRej(task, fn) {
  return /* Task */[(function (rej, res) {
              var cancelFn = /* record */[/* contents */(function (param) {
                    return /* () */0;
                  })];
              var onResponse = function (status) {
                if (status.tag) {
                  return Curry._1(res, status[0]);
                } else {
                  cancelFn[0] = run((function (status) {
                          if (status.tag) {
                            return Curry._1(res, status[0]);
                          } else {
                            return Curry._1(rej, status[0]);
                          }
                        }), Curry._1(fn, status[0]));
                  return /* () */0;
                }
              };
              cancelFn[0] = run(onResponse, task);
              return /* Cancel */[(function (param) {
                          return Curry._1(cancelFn[0], /* () */0);
                        })];
            })];
}

function map(task, fn) {
  return /* Task */[(function (rej, res) {
              var onResponse = function (status) {
                if (status.tag) {
                  return Curry._1(res, Curry._1(fn, status[0]));
                } else {
                  return Curry._1(rej, status[0]);
                }
              };
              var cancel = run(onResponse, task);
              return /* Cancel */[cancel];
            })];
}

function mapRej(task, fn) {
  return /* Task */[(function (rej, res) {
              var onResponse = function (status) {
                if (status.tag) {
                  return Curry._1(res, status[0]);
                } else {
                  return Curry._1(rej, Curry._1(fn, status[0]));
                }
              };
              var cancel = run(onResponse, task);
              return /* Cancel */[cancel];
            })];
}

function identity(value) {
  return /* Task */[(function (param, res) {
              Curry._1(res, value);
              return /* NoCancel */0;
            })];
}

var Operators = /* module */[
  /* >==< */chain,
  /* <@> */map,
  /* <!==!> */chainRej,
  /* <!@!> */mapRej
];

function timeout(value) {
  return /* Task */[(function (rej, res) {
              var timer = setTimeout((function (param) {
                      return Curry._1(rej, value);
                    }), 1000);
              return /* Cancel */[(function (param) {
                          clearTimeout(timer);
                          return /* () */0;
                        })];
            })];
}

var unsubscribe = run((function (param) {
        if (param.tag) {
          console.log(param[0]);
          return /* () */0;
        } else {
          console.log(param[0] + " there was an error");
          return /* () */0;
        }
      }), mapRej(chain(map(chain(/* Task */[(function (param, res) {
                          Curry._1(res, 5000);
                          return /* NoCancel */0;
                        })], (function (x) {
                        var value = Caml_int32.imul(x, 5000);
                        return /* Task */[(function (param, res) {
                                    Curry._1(res, value);
                                    return /* NoCancel */0;
                                  })];
                      })), (function (x) {
                    return x + 300 | 0;
                  })), timeout), (function (prim) {
            return String(prim);
          })));

exports.run = run;
exports.chain = chain;
exports.chainRej = chainRej;
exports.map = map;
exports.mapRej = mapRej;
exports.identity = identity;
exports.Operators = Operators;
exports.timeout = timeout;
exports.unsubscribe = unsubscribe;
/* unsubscribe Not a pure module */
