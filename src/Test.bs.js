// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Task$Task = require("./Task.bs.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

function timeout(value) {
  return /* Task */[(function (param, res) {
              var timer = setTimeout((function (param) {
                      return Curry._1(res, value);
                    }), 1000);
              return /* Cancel */[(function (param) {
                          clearTimeout(timer);
                          return /* () */0;
                        })];
            })];
}

function notTimeout(value) {
  return /* Task */[(function (param, res) {
              Curry._1(res, value);
              return /* NoCancel */0;
            })];
}

var p = Task$Task.Operators[/* >>| */1](Task$Task.parallel(Pervasives.$at(List.map(timeout, /* :: */[
                  1,
                  /* :: */[
                    2,
                    /* :: */[
                      3,
                      /* :: */[
                        4,
                        /* :: */[
                          5,
                          /* :: */[
                            6,
                            /* :: */[
                              7,
                              /* :: */[
                                8,
                                /* :: */[
                                  9,
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]), $$Array.to_list($$Array.map(notTimeout, $$Array.mapi((function (index, param) {
                            return index + 10 | 0;
                          }), Caml_array.caml_make_vect(10000, 1)))))), (function (param) {
        return List.fold_left((function (a, b) {
                      return a + b | 0;
                    }), 0, param);
      }));

function makeTask(i) {
  if (i >= 100000) {
    return Task$Task.pure(/* Done */Block.__(1, [i + 1 | 0]));
  } else if (i < 0) {
    return Task$Task.reject("i must be positive");
  } else {
    return Task$Task.pure(/* Next */Block.__(0, [i + 1 | 0]));
  }
}

var t = Task$Task.Operators[/* >>> */4](Task$Task.Operators[/* >>= */0](p, (function (param) {
            return Task$Task.chainRec(makeTask, param);
          })), (function (param) {
        console.log(param[0]);
        return /* () */0;
      }));

exports.timeout = timeout;
exports.notTimeout = notTimeout;
exports.p = p;
exports.makeTask = makeTask;
exports.t = t;
/* p Not a pure module */
